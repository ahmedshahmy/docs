#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 01, 2020 11:07:32 AM +0530  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pyrebase
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker

from datetime import datetime
import numpy as np

firebasConfig={
    'apiKey': "AIzaSyAyOKsYNnwrxwgmMy-7qQsT7QiYIcWF3-I",
    'authDomain': "renal-1e0ac.firebaseapp.com",
    'databaseURL': "https://renal-1e0ac.firebaseio.com",
    'projectId': "renal-1e0ac",
    'storageBucket': "renal-1e0ac.appspot.com",
    'messagingSenderId': "39709818947",
    'appId': "1:39709818947:web:8998d016a6d9e4ffa854f6",
    'measurementId': "G-1R80GQM1G8"
}

firebase=pyrebase.initialize_app(firebasConfig)
db=firebase.database()

#global x
#global y

global x1
global y1
x1=[]
y1=[]
#global unitnum

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def add(name,date,creat):
    date=date+"  "
    data={"RU":name,"date":date,"Creatinine":creat}
    db.child("patients1").push(data)
    print('data added..')
    sys.stdout.flush()

def graph(name):
   
    x=[]
    y=[]
    patients=db.child("patients1").order_by_child("RU").equal_to(name).get()

    patientdata=db.child("patientdata").order_by_child("RU").equal_to(name).get()
    print(patientdata)

    gfr20=0
    gfr15=0
    gfr10=0

    for pp in patientdata.each():
        print(pp)
        sexval=0
        ageval=0
        try:
            age=float(pp.val()["Age"])
            ageval=pow(age,-0.203)
        
            sex=pp.val()["Sex"]
            if sex=="M":
                sexval=1.0
            if sex=="F":
                sexval=0.742
        except Exception as e:
            print(e)
        print(ageval)
        print (sexval)
        
        try:
            gfr20=float( ( (20/( 175*ageval*sexval)) **(1/float(-1.154) ) )/0.0113 )
            gfr15=float( ( (15/( 175*ageval*sexval)) **(1/float(-1.154) ) )/0.0113 )
            gfr10=float( ( (10/( 175*ageval*sexval)) **(1/float(-1.154) ) )/0.0113 )

        except Exception as e:
            print(e)
        
        print(gfr20)
        print(gfr15)
        print(gfr10)




    for p in patients.each():
    
    
    #print(p.val()["date"])
        try:

            y.append(float(p.val()["Creatinine"]))
            x.append(datetime.strptime(p.val()["date"],'%m/%d/%Y  '))
        except Exception as e:
            print(e)
            continue

            


    

    plt.scatter(x, y)
    #plt.plot(x,y)
    print(x,y)
    plt.yticks(y)

    
    
    #plt.plot(x,y)
    plt.axhline(y=gfr20,color='green', label='eGFR=20')
    plt.axhline(y=gfr15,color='blue', label='eGFR=15')
    plt.axhline(y=gfr10,color='red', label='eGFR=10')
    plt.yscale('log')
    plt.gca().invert_yaxis()
    plt.xticks(x)
    plt.yticks(y)

    ax = plt.gca()
    ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
    ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())

   
    

    plt.xlabel("date")
    plt.ylabel("-log. S.Cr")
    plt.xticks(rotation=70)
    mng = plt.get_current_fig_manager()
    mng.resize(1000,1000)
    plt.legend()
    plt.show()
   

    print('graph loading..')
   
   
    
    sys.stdout.flush()
    #plt.yticks([100,200,300,400,500,600,700,800,900,1000])
    

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import renal1
    renal1.vp_start_gui()




